//Main file
//Displays 4 different effects

// Coded by Justin Marko
// Code for effect 0 done in class

//Output the screen-space or UV coordinate as a static gradient
vec4 myEffect0(in vec2 coord)
{
    vec2 uv = coord / iResolution.xy;
    vec3 color = vec3(uv, 0.0);
	float alpha = 1.0;
	return vec4(color, alpha); 
}

//Static checkerboard pattern with perfectly square checkers
vec4 myEffect1(in vec2 coord)
{
    float squareSize = 50.0f;// Square size in pixels
    vec2 uv = coord / squareSize; // Divides the coords into squares
    vec3 color;
    float alpha = 1.0;
    
    
    if(mod(floor(uv.x), 2.0f) == 0.0f)// Checks if the x square is even
    {
        if(mod(floor(uv.y), 2.0f) == 0.0f)// Checks if the y square is even
        {
            color = vec3(1.0f, 1.0f, 1.0f);// Sets color to white
        }
        
        else// The y square is odd
        {
            color = vec3(0.0f, 0.0f, 0.0f);// Sets color to black
        }
            
    }
    
    else// The x square is odd
    {
        if(mod(floor(uv.y), 2.0f) == 0.0f)// Checks if the x square is even
        {
            color = vec3(0.0f, 0.0f, 0.0f);// Sets color to white
            
        }
        
        else// The y square is odd
        {
            color = vec3(1.0f, 1.0f, 1.0f);// Sets color to black
        }
    }
    
    return vec4(color, alpha); 
}

//Circle whose color and size change over time
vec4 myEffect2(in vec2 coord)
{
    vec2 circleCenter = vec2(iResolution.xy / 2.0f);
    float circleSize = iTime * 10.0f;// Changes circle size based on time
    vec3 colorC;// Circle color
    vec3 colorB;// Background color
    float alpha = 1.0;
    
    //Colors the circle and background
    colorC = 0.5 + 0.5*cos(iTime+vec3(0,2,4));// Changes color based on time
    
    colorB = vec3(1.0f, 1.0f, 1.0f) - colorC;// Sets background to the complementary color of the circle
    
    
    //Creates the circle
    
    //Checks distance fo pixel from circle center
    float d = sqrt(pow((coord.x - circleCenter.x), 2.0f) + pow((coord.y - circleCenter.y), 2.0f));
    
    if(d <= circleSize)// Checks if pixel is within the circle raduis
    {
        return vec4(colorC, alpha);// Returns the circle color
    }
    
    else// Pixel is outside the circle radius
    {
        return vec4(colorB, alpha);// Returns the background color
    }
    
    
}

//Full-screen psychedelic effect
vec4 myEffect3(in vec2 coord)
{
    float squareSize = 10.0f;// Square size in pixels
    vec2 uv = coord / squareSize; // Divides the coords into squares
    vec3 color;
    float alpha = 1.0;
    
    color = 0.5 + 0.5*cos(iTime * 10.0f+uv.xyx+vec3(0,2,4));
    
    return vec4(color, alpha); 
}

//Main display
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{ 
    fragColor = myEffect0(fragCoord);
    
    //fragColor = myEffect1(fragCoord);
    
    //fragColor = myEffect2(fragCoord);
    
    //fragColor = myEffect3(fragCoord);
}