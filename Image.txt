// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

struct sRectangle
{
 	vec2 pos;
    float width;
    float height;
};
    
void initRectangle(out sRectangle rectangle, in vec2 pos, in float width, in float height)
{
    rectangle.pos = pos;
    rectangle.width = width;
    rectangle.height = height;
}
    
bool inRectangle(in vec2 fragCoord, in sRectangle rectangle)
{
	if ((fragCoord.x > rectangle.pos.x - rectangle.width / 2.0) &&
        (fragCoord.x < rectangle.pos.x + rectangle.width / 2.0) &&
        (fragCoord.y > rectangle.pos.y - rectangle.height / 2.0) &&
        (fragCoord.y < rectangle.pos.y + rectangle.height / 2.0)) 
    {
		return true;
	}
    
	return false;
}

vec4 calcColor(in sViewport vp, in sRay ray)
{
    sRectangle rec1;
    initRectangle(rec1, vec2(20.0f, 20.0f), 20.0f, 40.0f);
    
    sRectangle rec2;
    initRectangle(rec2, vec2(120.0f, 20.0f), 20.0f, 40.0f);
    
    sRectangle[] sRectangles = sRectangle[] (rec1, rec2);
    
    for(int i = 0; i < 2; i++)
    {
        if(inRectangle(vp.pixelCoord, sRectangles[i]))
        {
            return vec4(1.0);
        }
    }
    
    return vec4(0.0, 0.0, 0.0, 1.0);
    
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
   // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);

    // Output to screen
    fragColor = calcColor(vp, ray);
}