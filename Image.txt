// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

struct sRectangle
{
 	vec2 pos;
    float width;
    float height;
};
    
void initRectangle(out sRectangle rectangle, in vec2 pos, in float width, in float height)
{
    rectangle.pos = pos;
    rectangle.width = width;
    rectangle.height = height;
}
    
bool inRectangle(in vec2 pixelCoord, in sRectangle rectangle)
{
	if ((pixelCoord.x > rectangle.pos.x - rectangle.width) &&
        (pixelCoord.x < rectangle.pos.x + rectangle.width) &&
        (pixelCoord.y > rectangle.pos.y - rectangle.height) &&
        (pixelCoord.y < rectangle.pos.y + rectangle.height)) 
    {
		return true;
	}
    
	return false;
}

vec4 calcColor(in sViewport vp, in sRay ray)
{
    sRectangle rLWallTop;
    initRectangle(rLWallTop,    vec2(0.02, 0.77), 0.02, 0.23);
    
    sRectangle rLWallBotton;
    initRectangle(rLWallBotton, vec2(0.02, 0.23), 0.02, 0.23);
    
    sRectangle rRWallTop;
    initRectangle(rRWallTop,    vec2(0.98, 0.77), 0.02, 0.23);
    
    sRectangle rRWallBotton;
    initRectangle(rRWallBotton, vec2(0.98, 0.23), 0.02, 0.23);
    
    sRectangle rTWall;
    initRectangle(rTWall,       vec2(0.50, 0.97), 1.00, 0.03);
    
    sRectangle rBWall;
    initRectangle(rBWall,       vec2(0.50, 0.03), 1.00, 0.03);
    
    sRectangle[] sRectangles = sRectangle[] (rLWallTop, rLWallBotton, rRWallTop, rRWallBotton, rTWall, rBWall);
    
    for(int i = 0; i < 6; i++)
    {
        if(inRectangle(vp.uv, sRectangles[i]))
        {
            return vec4(1.0);
        }
    }
    
    return vec4(0.0, 0.0, 0.0, 1.0);
    
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
   // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);

    // Output to screen
    fragColor = calcColor(vp, ray);
}